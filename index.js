import { isObject, isString } from './src/utils/shared/functions/validateTypes.js';
import IsNotObjectError from './src/utils/shared/errors/IsNotObject.error.js';
import { doSearch } from './src/main/search/search.js';
import IsNotStringError from './src/utils/shared/errors/IsNotString.error.js';
import { getMaxMinDistance, resetMaxMin, setMaxMinDistance } from './src/main/search/findSimilarMatches.js';
import { generate, findDataset } from './src/main/dataSet/generateDataset.js';

/**
 * This function generates a data set based on an array of objects. **ID field required on each object**.
 * @param {Object} main Main object with options.
 * @param {[object]} main.array Array of objects.
 * @param {string} main.nameId Name of the identification field in your objects - \'id\' by default.
 * @param {number} main.wordSize Size of the words you want to filter to generate the tags. \'2\' by default
 * @param {[string]} main.attributes Name of the attributes on the objects you need to generate the tags.
 * @return Array of objects with an array of tags on each object in the array.
 */
export function dataSetGenerate(main) {
    try {
        if (!isObject(main)) {
            throw new IsNotObjectError('main')
        }

        return generate(main);
    } catch (e) {
        if (e.type && e.description)
            console.error(`\n[${e.type}] - ${e.description}`);
        else
            console.error(e.message)
    }
}

/**
 * This function uses user input to search for objects generated by the data set.
 * - by default, it takes the first attribute that is considered a string in the object.
 * - Ignores identifier (ID) attributes and take the next attribute.
 * @param  input User input in a search bar.
 * @param  priorityAttribute Attribute that the search will always give priority.
 * @return Returns an array with the found objects.
 */
export function search(input, priorityAttribute) {
    try {
        if (!isString(input)) {
            throw new IsNotStringError('input');
        }
        const field = (input) ? input : '';
        priorityAttribute = (priorityAttribute) ? priorityAttribute : '';
        return doSearch(field, priorityAttribute);
    } catch (e) {
        console.error(`\n[${e.type}] - ${e.description}`);

    }
}

/**
 * This function returns an object with all the attributes of the dataset.
 */
export function getDataset() {
    return findDataset();
}

/**
 * This function returns an object with the current values ​​of 'min' and 'max'.
 */
export function getSearchDistance() {
    return getMaxMinDistance();
}

/**
 * This function allows changing the maximum and minimum tolerance that the search needs to bring results.
 * The search result will be the max value or the distance value between 'max' and 'min'.
 * @param  min Minimum tolerance value. (0.30 by default).
 * @param  max Max tolerance value. (0.85 by default).
 */
export function setSearchDistance(min, max) {
    setMaxMinDistance(min, max);
}

/** 
 * This function resets the distance values ​​('min' and 'max') to the default values. 
 */
export function resetDistance() {
    resetMaxMin();
}